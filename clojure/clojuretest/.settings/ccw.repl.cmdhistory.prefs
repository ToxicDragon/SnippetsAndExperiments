#Sat Jul 16 12:07:43 CEST 2011
cmdhistory=["(chain a b)" "(chain String class)" "(defmacro chain [& args]\\n  (list '. (first args) (chain (rest args))))" "(chain String class)" "(expand-macro chain String class)" "(macro-expand-1 chain String class)" "(macroexpand-1 chain String class)" ";; Loading file src/clojuretest.clj" "(mac" "(macroexpand time)" "(defmacro bench [form] \\n  `(let [start (System/nanoTime)\\n         result ~form]\\n     {\:result result \:elapsed (- (System/nanoTime) start)}))" "(bench (str \\"a\\" \\"b\\"))" ";; Loading file src/clojuretest.clj" "(.java/lang/Math random)" " (. java/lang/Math random)" "(. random Math)" "(. Math random)" ";; Loading file src/clojuretest.clj" "(def vals (map \#(new Value (nth 0 %) (nth 1 %)) [[1,2],[2,5],[3,4]]))" "(def values (map \#(new Value (nth 0 %) (nth 1 %)) [[1,2],[2,5],[3,4]]))" "(println values)" "(java.util.ArrayList. values)" "(java.util.ArrayList. (map \#(new Value (nth 0 %) (nth 1 %)) [[1,2],[2,5],[3,4]]))" "(map \#(new Value (nth 0 %) (nth 1 %)) [[1,2],[2,5],[3,4]])" "(nth 1 [[1,2] [2,3]])" "(map \#(new Value (nth % 0) (nth % 1)) [[1,2],[2,5],[3,4]])" ";; Loading file src/clojuretest.clj" "(map \#(new Value (nth % 0) (nth % 1)) [[1,2],[2,5],[3,4]])" ";; Loading file src/clojuretest.clj" "(vec(map \#(new Value (nth % 0) (nth % 1)) val-vector))" "(vec(map \#(new Value (nth % 0) (nth % 1)) [[1,2],[2,5],[3,4]]))" "(def values (vec(map \#(new Value (nth % 0) (nth % 1)) [[1,2],[2,5],[3,4]])))" "(java.util.ArrayList. values)" "(def vs (java.util.ArrayList. values))" "(nth vs 1)" "(.getValue  (nth vs 1))" "(defn dummy-values [val-vector] \\n  (let [values (vec(map \#(new Value (nth % 0) (nth % 1)) val-vector))]\\n    (java.util.ArrayList. values)))" "(def values (dummy-values [[1,2],[2,5],[3,4]]))" "(nth values 2)" ";; Loading file src/clojuretest.clj" "d" ";; Loading file src/clojuretest.clj" "(def values (dummy-values [[1,2],[2,5],[3,7],[4,6],[5,6]))" "(def values (dummy-values [[1,2],[2,5],[3,7],[4,6],[5,6]]))" "(.render app values)" "(defn new-graph [val-vactor] \\n  (new Graph (dummy-values val-vector) toString))" "(defn new-graph [val-vector] \\n  (new Graph (dummy-values val-vector) toString))" "(.render app (new-graph values))" "(.render app (new-graph [[1,2],[2,100], [3,20], [4, 35]]))" "(map \#(vec % (+ % (* 10 Math.random))) (range 20))" "(map \#(vec % (+ % (* 10 Math/random))) (range 20))" "(map \#(vec % (+ % (* 10 (.random Math)))) (range 20))" "(Math/random)" "(map \#(vec % (+ % (* 10 (Math/random)))) (range 20))" "(map \#(vec '(% (+ % (* 10 (Math/random))))) (range 20))" "(map \#(vec (cons % (+ % (* 10 (Math/random))))) (range 20))" "(map \#(vec (list % (+ % (* 10 (Math/random))))) (range 20))" "(vec (map \#(vec (list % (+ % (* 10 (Math/random))))) (range 20)))" "(defn rand-range [max]\\n  (vec (map \#(vec (list % (+ % (* 10 (Math/random))))) (range max))))" "(defn render (.render app (rand-range 100)))" "(defn render [max] (.render app (rand-range max)))" "(render 199)" "(defn render [max] (.render app (new-graph (rand-range max))))" "(render 199)" "(defn rand-range [max]\\n  (vec (map \#(vec (list % (- % (* % (Math/random))))) (range max))))" "(render 199)" "(defn calc-val\\n  [time-series element]\\n  (let [p (partition 2 1 time-series)]\\n    (for [t p]\\n      (let [first-value (first t)\\n            second-value (second t)]\\n        (println (str first-value \\" \\" second-value))))))" "(calc-val '(1 2 3 4 5 6) 6)" " (defn calc-val\\n     [time-series element]\\n     (let [p (partition 2 1 time-series)]\\n       (for [t p]\\n         (let [first-value (first t)\\n               second-value (second t)]\\n           (println (str first-value \\" \\" second-value element))))))" "(calc-val '(1 2 3 4 5 6) 6)" "(partition 2 0 '(1 2 3))" "(partition 2 1 '(1 2 3))" "(partition 2 1 '(1 2 3 4 5 6 7 8 9 10))" "(print 1)" "(partition 2 1 '(1 2 3 4 5 6 7 8 9))" "(partition 2 1 2 '(1 2 3 4 5 6 7 8 9))" "(partition 2 1 '(0) '(1 2 3 4 5 6 7 8 9 10))" "(defn mean-avg [values] \\n  (let [size (count values) \\n        sum (reduce + values]\\n        (/ sum size))))" "(defn mean-avg [values] \\n  (let [size (count values) \\n        sum (reduce + values)]\\n        (/ sum size)))" "(mean-avg '(1 2 3 4 5))" "(def vs '(1 2 5 2 0 10 8 5 6 0 1 3 7 12 11 5 1 6 18))" "(defn 3pt [values]" "(defn pt3 [values] \\n  (partition 3 1 values))" "(pt3 vs)" "(map mean-avg (pt3 vs))" "(cons (first vs) (map mean-avg (pt3 vs)))" "(mv-avg vs" "(mv-avg vs)" "(def app (GraphMain.))" "(defn val-vec [values]\\n  (vec (map vec values)))" "(val-vec vs)" "(defn val-vec [values]\\n  (vec (map  \#(vec (list 1 %)) values))" "(defn val-vec [values]\\n  (vec (map  \#(vec (list 1 %)) values)))\\n" " (val-vec vs)" "(.render app (new-graph (val-vec vs)))" "(.render app (new-graph (val-vec (mv-avg vs))))" "(range 3)" "(defn prepend-idx [values]\\n  (partition 2 0 (interleave (range (count values) values)))) " "(prepend-idx '(1 2 3 4 5))" "(defn prepend-idx [values]\\n  (partition 2 0 (interleave (range (count values)) values))) " "(prepend-idx '(1 2 3 4 5))" "(println (prepend-idx '(1 2 3 4 5)))" "(prepend-idx vs)" "(interleave '(1 2 3) '(2 3 4))" "(interleave (range 3) '(1 2 3))" "(partition 2 0 (interleave (range 3) '(1 2 3)))" "d" "(defn prepend-idx [values]\\n  (partition 2 (interleave (range (count values)) values))) " "(prepend-idx vs)" "(val-vex (prepend-idx vs))" "(val-vec (prepend-idx vs))" "(defn val-vec [values]\\n  (vec (map vec values)))" "(val-vec (prepend-idx vs))" "(def app (GraphMain.))" "(.render app (new-graph (val-vec (prepend-idx vs)))" "(.render app (new-graph (val-vec (prepend-idx vs))))" "(growing-ampl 10)" "(def app (GraphMain.))" "(def vs2 (growing-ampl 200))" "(render app vs2)" "(render app (mv-avg vs2))" "(def app (GraphMain.))" "(def vs2 (growing-ampl 200))" "(render app vs2)" "(render app (mv-avg vs2))" "(def app (GraphMain.))" "(render app vs2)" "(render app (mv-avg vs2))" "(defn slide [values win-size]\\n  (partition win-size 1 values))" "(slide '(1 2 3 4 5 6 7 8 9 10))" "(slide '(1 2 3 4 5 6 7 8 9 10) 4)" "(defn mv-avg [values window]\\n  (cons (first values) (map mean-avg (slide values window))))" "(mv-avg vs 6)" "(render app (mv-avg vs2 20))" "(render app (mv-avg vs2 100))" "(render app (mv-avg vs2 10))" "(def app (GraphMain.))" "(render app vs3)" "(even-ampl 50 200)" "(defn even-ampl [ampl nb] \\n  (map \#(- (* ampl (Math/random)) (* ampl (Math/random))) (range nb))) " "(even-ampl 50 200)" "(even-ampl 50 200 300)" "(even-ampl 50 200)" "(map \#(- (* 50 (Math/random)) (* 50 (Math/random))) (range 100))" "(map \#(- (* 50 (Math/random)) (* 50 (Math/random)) (- % %)) (range 100))" "(defn even-ampl [ampl nb] \\n  (map \#(- (* ampl (Math/random)) (* ampl (Math/random)) (- % %)) (range nb))) " "(even-ampl 50 200)" "(def app (GraphMain.))" "(render app vs3)" "(render app (mv-avg vs3 20))" "(render app (mv-avg vs3 5))" "(render app vs3)" "(render app (mv-avg vs3 5))" "(def vs3 (even-ampl 50 2000))" "(render app vs3)" "(render app (mv-avg vs3 5))" "(render app (mv-avg vs3 50))" "(def app (GraphMain.))" "(render app vs3)" "(render app (mv-avg vs3 20))" "(render app vs3)" "(render app vs3 \\"g1\\")" "(drop-gr" "(drop-graph \\"g1\\")" "(drop-graph app \\"g1\\")" "(render app (mv-avg vs3 20))" "(render app (mv-avg vs3 20) \\"g2\\")" "(defn render [val-list graph-id] \\n  (render app val-list graph-id))" "(render app (mv-avg vs3 20) \\"g3\\")" "(render (mv-avg vs3 20) \\"g2\\")" "(render vs3 \\"g1\\")" "(render (mv-avg vs3 20) \\"g2\\")" "(render vs3 \\"g1\\")" "(.render app [[1,2,3,4,5] [2,3,4,5,6]] \\"gx\\")" "(to-array '(1 2 3))" "(double-array '(1 2 3))" "(defn double-array2d [list2d] " "(defn double-array2d [list2d]\\n  (double-array (double-array (first list2d)) (double-array (nth 2 list2d))))" "(double-array2d '((1 2 3) (4 5 6)))" "(defn double-array2d [list2d]\\n  (double-array (double-array (first list2d)) (double-array (nth list2d 2))))" "(double-array2d '((1 2 3) (4 5 6)))" "(defn double-array2d [list2d]\\n  (double-array (double-array (first list2d)) (double-array (second list2d))))" "(double-array2d '('(1 2 3) '(4 5 6)))" "(double-array (first '('(1 2 3) '(1 3 4))))" "(double-array (first (list '(1 2 3) '(1 3 4))))" "(double-array2d (list '(1 2 3) '(4 5 6)))" "(list '(1 2 3) '(4 5 6))" "(def l (list '(1 2 3) '(4 5 6)))" "(first l)" "(second l)" "(double-array (first l))" "(defn double-array2d [list2d]\\n  (double-array (list (double-array (first list2d)) (double-array (second list2d)))))" "(double-array2d (list '(1 2 3) '(4 5 6)))" "(double-array (list '(1 2 3) '(4 5 6)))" "(make-array (Double/TYPE) (list '(1 2 3) '(4 5 6)))" "(to-array-2d (list '(1 2 3) '(4 5 6)))" "(.render app (to-array-2d (list '(1 2 3) '(4 5 6))) \\"gx\\")" "(into-array (map double-array [[1 2] [3 4]]))" "(.render app (into-array (map double-array [[1 2] [3 4]])) \\"gx\\")" "(defn double-array2d [col2d]\\n (into-array (map double-array col2d)))" "(defn rnd [values] \\n  ([let arr (double-array2d (list (range (count values)) values))\\n    (render app arr)))" "(defn rnd [values] \\n  ([let arr (double-array2d (list (range (count values)) values))]\\n    (render app arr)))" "(defn rnd [values] \\n  (let arr [(double-array2d (list (range (count values)) values))]\\n    (render app arr)))" "(defn rnd [values] \\n  (let [arr (double-array2d (list (range (count values)) values))]\\n    (render app arr)))" "(rnd (1 2 3 4 5 6 7))" " (rnd '(1 2 3 4 5 6 7))" "(defn rnd [values] \\n  (let [arr (double-array2d (list (range (count values)) values))]\\n    (.render app arr)))" "(rnd '(1 2 3 4 5 6 7))" "(defn with-indexes [col]\\n  (double-array2d (list (range (count col)) col)))" "(with-indexes vs)" "(.render app (arr-with-indexes vs))" "(.render app (with-indexes vs))" "(.render app (arr-with-indexes vs) \\"gr3\!\\")" "(.render app (with-indexes vs) \\"gr3\!\\")" "(rnd vs2 \\"g1\\")" "(rnd vs3 \\"g1\\")" "(rnd vs2 \\"g2\\")" "(drop" "(drop-graph \\"g2\\")" "(rnd (mv-avg vs2 10) \\"g1\\") " "(rnd (mv-avg vs3 10) \\"g1\\")" "\\n\\n\\n(rnd vs3 \\"g2\\")\\n" "(defn even-ampl2 [ampl nb] \\n  (map \#(- (* ampl (Math/random))(- % %)) (range nb)))" "(def vs4 (even-ampl2 50 200))" "(rnd vs4 \\"g1\\")" "(rnd (mv-avg vs4 10) \\"g2\\") " "(defn mk-period [period amp vario]\\n  (map \#(- (* % amp) (* (Math/random) vario))))" "(mk-period (0.1 0.2 0.5 0.3 0.4 0.7))" "(mk-period '(0.1 0.2 0.5 0.3 0.4 0.7))" "(mk-period '(0.1 0.2 0.5 0.3 0.4 0.7) 50 3)" "(defn mk-period [period amp vario]\\n  (map \#(- (* % amp) (* (Math/random) vario)) period))" "(mk-period '(0.1 0.2 0.5 0.3 0.4 0.7) 50 3)" "(def week-prd '(0.8 0.7 0.5 0.6 0.4 0.2 0.1))" "(defn periodic [period len amp vario] \\n  (loop [l len res '()]\\n    (if (< 1 l)\\n      (take (count period) res)\\n      (recur (- len (count period))\\n             (cons res (mk-period period amp vario))))))" "(periodic week-prd 21 50 5)" " (periodic week-prd 21 50 5)" "(periodic week-prd 21 50 5)" "(defn periodic [period len amp vario] \\n  (loop [l len res '()]\\n    (if (< l 1)\\n      (take (count period) res)\\n      (recur (- l (count period))\\n             (concat res (mk-period period amp vario))))))" "(periodic week-prd 21 50 5)" "(take 14 (periodic week-prd 21 50 5))" " (take 14 (periodic week-prd 49 50 5))" "(defn periodic [period len amp vario] \\n  (loop [l len res '()]\\n    (if (< l 1)\\n      (take len res)\\n      (recur (- l (count period))\\n             (concat res (mk-period period amp vario))))))" "(periodic week-prd 49 50 5)" "(def week (periodic week-prd 21 50 5))" "(rnd week \\"g1\\")" "(def week (periodic week-prd 500 50 5))" "(def weeks (periodic week-prd 700 50 5))" "(rnd weeks \\"weeks\\")" "(rnd (mv-avg weeks 10) \\"weeks-av\\")" "(def weeks (periodic week-prd 140 50 5))" "(rnd weeks \\"weeks\\")" "(rnd (mv-avg weeks 10) \\"weeks-av\\")" "(rnd weeks \\"weeks\\")" "(rnd (mv-avg weeks 10) \\"weeks-av\\")" "(def weeks (periodic week-prd 140 20 2))" "(rnd weeks \\"weeks\\")" "(rnd (mv-avg weeks 10) \\"weeks-av\\")" "(defn periodic2 \\n  [period amp vario]\\n  (periodic2 period amp vario '()) \\n  [period amp vario res]\\n  (lazy-seq (periodic2 period amp vario (concat res (mk-period period amp vario)))))" "(defn periodic2  \\n  [period amp vario res]\\n  (lazy-seq (periodic2 period amp vario (concat res (mk-period period amp vario)))))" "(defn periodic2 \\n  ([period amp vario]\\n  (periodic2 period amp vario '())) \\n  ([period amp vario res]\\n  (lazy-seq (periodic2 period amp vario (concat res (mk-period period amp vario))))))" "(take 14 (periodic2 week-prd 20 2))" "(defn periodic2 \\n  ([period amp vario]\\n  (periodic2 period amp vario '())) \\n  ([period amp vario res]\\n  (recur (concat res (mk-period period amp vario)))))" "(defn periodic2 \\n  ([period amp vario]\\n  (periodic2 period amp vario '())) \\n  ([period amp vario res]\\n  (recur period amp vario (concat res (mk-period period amp vario)))))" "(take 33 (periodic week-prd 140 20 2))" "(nth 999999 (take 1000000 (periodic week-prd 140 20 2)))" "(nth (take 1000000 (periodic week-prd 140 20 2)) 999999)" "(drop 999999 (take 1000000 (periodic week-prd 140 20 2)))" "(drop 999999 (take 1000000 (periodic2 week-prd 140 20 2)))" "(take 33 (periodic2 week-prd 50 5))" "(defn periodic2 \\n  ([period amp vario]\\n  (periodic2 period amp vario '())) \\n  ([period amp vario res]\\n    (let [new-res (concat res (mk-period period amp vario))]                       \\n  (recur period amp vario ))))" "(defn periodic2 \\n  ([period amp vario]\\n  (periodic2 period amp vario '())) \\n  ([period amp vario res]\\n    (let [new-res (concat res (mk-period period amp vario))]                       \\n  (recur period amp vario new-res))))" "(take 33 (periodic2 week-prd 50 5))" "(take 333 (periodic week-prd 140 20 2))" "(defn periodic2 \\n  ([period amp vario]\\n  (periodic2 period amp vario '())) \\n  ([period amp vario res]\\n    (let [new-res (concat res (mk-period period amp vario))]                       \\n  (lazy-seq (periodic2 period amp vario new-res)))))" "(take 33 (periodic2 week-prd 50 5))" "(take 5 (periodic2 week-prd 20 2))" "l" "(def week-prd (lazy-seq '(0.8 0.82 0.79 0.85 0.78 0.69 0.65)))" "(week-prd)" "(take 3 (week-prd))" "week-prd" "(defn periodic2 \\n  ([period amp vario]\\n  (periodic2 period amp vario '())) \\n  ([period amp vario res]\\n    (let [new-res (concat res (lazy-seq (mk-period period amp vario)))]                       \\n  (lazy-seq (periodic2 period amp vario new-res)))))" "(take 10 (periodic2 week-prd 10 1))" "(defn cc [coll]\\n  (cc coll '())\\n  ([coll res]\\n  (lazy-seq (cc coll (concat res coll)))))" "(defn cc \\n  ([coll]\\n  (cc coll '()))\\n  ([coll res]\\n  (lazy-seq (cc coll (concat res coll)))))" "(take 10 (cc '(1 2 3 4)))" "(defn cc \\n  ([coll]\\n  (cc coll '()))\\n  ([coll res]\\n    (let [nr (concat res coll)\\n  (lazy-seq \\n    (cc coll nr)))))" "(defn cc \\n  ([coll]\\n  (cc coll '()))\\n  ([coll res]\\n    (let [nr (concat res coll)]\\n  (lazy-seq \\n    (cc coll nr)))))" "(take 10 (cc '(1 2 3 4)))" "(defn cc \\n  ([coll]\\n  (cc coll '()))\\n  ([coll res]\\n    (let [nr (concat (seq res) (seq coll))]\\n  (lazy-seq \\n    (cc coll nr)))))" "(take 10 (cc '(1 2 3 4)))" "(defn cc \\n  ([coll]\\n  (cc coll '()))\\n  ([coll res]\\n  (lazy-seq (cc coll (lazy-cat res coll)))))\\n" "(take 10 (cc '(1 2 3 4)))" "(defn cc \\n  ([coll]\\n  (cc coll '()))\\n  ([coll res]\\n    (println \\"1\\")\\n  (lazy-seq (cc coll (lazy-cat res coll)))))" "(defn cc \\n  ([coll]\\n  (cc coll '()))\\n  ([coll res]\\n  (do\\n    (println \\"1\\")\\n    (lazy-seq (cc coll (lazy-cat res coll))))))" "(take 5 (cc '(1 2 3)))" "(defn cc \\n  ([coll]\\n  (cc coll (lazy-seq '())))\\n  ([coll res]\\n  (do\\n    (lazy-seq (cc coll (concat res coll))))))" "(take 5 (cc (lazy-seq '())))" "(defn cc \\n  ([coll]\\n  (cc coll (lazy-seq '())))\\n  ([coll res]\\n    (lazy-seq (cc coll (concat res coll)))))" "(take 5 (cc (lazy-seq '())))" "(defn cc \\n  ([coll]\\n    (concat coll (lazy-seq (cc coll)))))" "(take 5 (cc '(1 2 3)))" "(defn cc \\n  [coll]\\n    (concat coll (lazy-seq (cc coll))))" "(take 5 (cc '(1 2 3)))" "(drop 10000000 (take 5 (cc '(1 2 3))))" "(take 5 (drop 10000000 (take 20000000 (cc '(1 2 3)))))" "(defn periodic2 \\n  [period amp vario]                   \\n  (concat (mk-period period amp vario) (lazy-seq (periodic2 period amp vario))))" "(defn mk-period [period amp vario]\\n  (map \#(- (* % amp) (* (Math/random) vario)) period))" "(defn periodic2 \\n     [period amp vario]                   \\n     (concat (mk-period period amp vario) (lazy-seq (periodic2 period amp vario))))" "(take 20 (periodic2 '(0.8 0.5 0.8) 10 0.1))" "(take 5 (drop 10000000 (take 20000000 (periodic2 '(0.8 0.5 0.8) 10 0.1))))" "(defn periodic2 \\n  [period amp vario]                   \\n  (concat (mk-period period amp vario) (periodic2 period amp vario)))" "(take 5 (drop 10000000 (take 20000000 (periodic2 '(0.8 0.5 0.8) 10 0.1))))" "(defn periodic2 \\n        [period amp vario]                   \\n        (concat (mk-period period amp vario) (lazy-seq (periodic2 period amp vario))))" "(take 5 (drop 100000000 (take 200000000 (periodic2 '(0.8 0.5 0.8) 10 0.1))))" "(defn lazy? [coll]\\n(\= (type coll) clojure.lang.LazySeq))" "(lazy? (periodic2 '(0.8 0.5 0.8) 10 0.1))" "(def weeks (take 49 (periodic week-prd 10 0.5)))" "(take 49 (periodic week-prd 10 0.5))" "(rnd weeks \\"weeks\\")" "(take 49 (periodic week-prd 10 0.5))" "(take 49 (series/periodic week-prd 10 0.5))" "(use series)" "(\:use series)" "('use series)" "(ns series)" "(rnd weeks \\"weeks\\")" "(rnd (mv-avg weeks 10) \\"weeks-av\\")" "(def week-prd '(0.8 0.82 0.79 0.85 0.78 0.75 0.74))" "(def weeks (take 49 (periodic week-prd 10 0.5)))" "rnd weeks \\"weeks\\")" "(rnd weeks \\"weeks\\")" "(rnd (mv-avg weeks 10) \\"weeks-av\\")"]
eclipse.preferences.version=1
